// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Crypto Balance API
 *
 * Derives addresses from an extended public key (XPUB) or equivalent, retrieves balances for a given cryptocurrency, and converts them to the requested fiat currency using an external rate service. 
 *
 * API version: 1.0.2
 */

package cryptobalancerest

import (
	"net/http"
	"strings"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"BalanceGet": Route{
			"BalanceGet",
			strings.ToUpper("Get"),
			"/balance",
			c.BalanceGet,
		},
	}
}

// OrderedRoutes returns all the api routes in a deterministic order for the DefaultAPIController
func (c *DefaultAPIController) OrderedRoutes() []Route {
	return []Route{
		Route{
			"BalanceGet",
			strings.ToUpper("Get"),
			"/balance",
			c.BalanceGet,
		},
	}
}



// BalanceGet - Get account balance in crypto and fiat
func (c *DefaultAPIController) BalanceGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var xpubParam string
	if query.Has("xpub") {
		param := query.Get("xpub")

		xpubParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "xpub"}, nil)
		return
	}
	var currencyParam string
	if query.Has("currency") {
		param := query.Get("currency")

		currencyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "currency"}, nil)
		return
	}
	var fiatParam string
	if query.Has("fiat") {
		param := query.Get("fiat")

		fiatParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "fiat"}, nil)
		return
	}
	result, err := c.service.BalanceGet(r.Context(), xpubParam, currencyParam, fiatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
