/*
Bitcoin Balance API

Derives Taproot addresses from an XPUB, checks balances via Electrum, and converts to a fiat currency using an external crypto rate service. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cryptobalancerest

import (
	"encoding/json"
)

// checks if the BalanceGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BalanceGet200Response{}

// BalanceGet200Response struct for BalanceGet200Response
type BalanceGet200Response struct {
	// Balance converted to fiat.
	Value *float64 `json:"value,omitempty"`
	// Balance in BTC.
	Balance *float64 `json:"balance,omitempty"`
}

// NewBalanceGet200Response instantiates a new BalanceGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceGet200Response() *BalanceGet200Response {
	this := BalanceGet200Response{}
	return &this
}

// NewBalanceGet200ResponseWithDefaults instantiates a new BalanceGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceGet200ResponseWithDefaults() *BalanceGet200Response {
	this := BalanceGet200Response{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *BalanceGet200Response) GetValue() float64 {
	if o == nil || IsNil(o.Value) {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetValueOk() (*float64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *BalanceGet200Response) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *BalanceGet200Response) SetValue(v float64) {
	o.Value = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *BalanceGet200Response) GetBalance() float64 {
	if o == nil || IsNil(o.Balance) {
		var ret float64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BalanceGet200Response) GetBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *BalanceGet200Response) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float64 and assigns it to the Balance field.
func (o *BalanceGet200Response) SetBalance(v float64) {
	o.Balance = &v
}

func (o BalanceGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BalanceGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	return toSerialize, nil
}

type NullableBalanceGet200Response struct {
	value *BalanceGet200Response
	isSet bool
}

func (v NullableBalanceGet200Response) Get() *BalanceGet200Response {
	return v.value
}

func (v *NullableBalanceGet200Response) Set(val *BalanceGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceGet200Response(val *BalanceGet200Response) *NullableBalanceGet200Response {
	return &NullableBalanceGet200Response{value: val, isSet: true}
}

func (v NullableBalanceGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


