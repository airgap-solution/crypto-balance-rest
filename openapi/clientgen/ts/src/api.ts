/* tslint:disable */
/* eslint-disable */
/**
 * Bitcoin Balance API
 * Derives Taproot addresses from an XPUB, checks balances via Electrum, and converts to a fiat currency using an external crypto rate service. 
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface BalanceGet200Response {
    /**
     * Balance converted to fiat.
     */
    'value'?: number;
    /**
     * Balance in BTC.
     */
    'balance'?: number;
}

/**
 * DefaultApi - axios parameter creator
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Derives addresses from an XPUB, queries Electrum for balances, and converts to the requested fiat currency using the crypto rate API. 
         * @summary Get XPUB balance in BTC and fiat
         * @param {string} xpub Extended public key (XPUB) to derive addresses from.
         * @param {string} currency Crypto currency symbol (must be supported by the rate API).
         * @param {string} fiat Fiat currency symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceGet: async (xpub: string, currency: string, fiat: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xpub' is not null or undefined
            assertParamExists('balanceGet', 'xpub', xpub)
            // verify required parameter 'currency' is not null or undefined
            assertParamExists('balanceGet', 'currency', currency)
            // verify required parameter 'fiat' is not null or undefined
            assertParamExists('balanceGet', 'fiat', fiat)
            const localVarPath = `/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xpub !== undefined) {
                localVarQueryParameter['xpub'] = xpub;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }

            if (fiat !== undefined) {
                localVarQueryParameter['fiat'] = fiat;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Derives addresses from an XPUB, queries Electrum for balances, and converts to the requested fiat currency using the crypto rate API. 
         * @summary Get XPUB balance in BTC and fiat
         * @param {string} xpub Extended public key (XPUB) to derive addresses from.
         * @param {string} currency Crypto currency symbol (must be supported by the rate API).
         * @param {string} fiat Fiat currency symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceGet(xpub: string, currency: string, fiat: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceGet(xpub, currency, fiat, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.balanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Derives addresses from an XPUB, queries Electrum for balances, and converts to the requested fiat currency using the crypto rate API. 
         * @summary Get XPUB balance in BTC and fiat
         * @param {string} xpub Extended public key (XPUB) to derive addresses from.
         * @param {string} currency Crypto currency symbol (must be supported by the rate API).
         * @param {string} fiat Fiat currency symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceGet(xpub: string, currency: string, fiat: string, options?: RawAxiosRequestConfig): AxiosPromise<BalanceGet200Response> {
            return localVarFp.balanceGet(xpub, currency, fiat, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 */
export interface DefaultApiInterface {
    /**
     * Derives addresses from an XPUB, queries Electrum for balances, and converts to the requested fiat currency using the crypto rate API. 
     * @summary Get XPUB balance in BTC and fiat
     * @param {string} xpub Extended public key (XPUB) to derive addresses from.
     * @param {string} currency Crypto currency symbol (must be supported by the rate API).
     * @param {string} fiat Fiat currency symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    balanceGet(xpub: string, currency: string, fiat: string, options?: RawAxiosRequestConfig): AxiosPromise<BalanceGet200Response>;

}

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Derives addresses from an XPUB, queries Electrum for balances, and converts to the requested fiat currency using the crypto rate API. 
     * @summary Get XPUB balance in BTC and fiat
     * @param {string} xpub Extended public key (XPUB) to derive addresses from.
     * @param {string} currency Crypto currency symbol (must be supported by the rate API).
     * @param {string} fiat Fiat currency symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public balanceGet(xpub: string, currency: string, fiat: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).balanceGet(xpub, currency, fiat, options).then((request) => request(this.axios, this.basePath));
    }
}



